---
title: "Evaluating 2024 US Presidential Election Predictions"
format: html
editor: visual
---

## Purpose

In 2021, I used US Presidential election county level data from 1960 - 2020 to predict the outcome of the 2024 US Presidential election. I used a series of Poisson regression models under the tidymodels + modeltime framework.

For reference:

<https://www.tidymodels.org/>

<https://business-science.github.io/modeltime/>

```{r loading_data}
library(readxl)
library(tidyverse)
library(lubridate)
library(timeDate)
library(tidyr)
library(DT)

#-----Load data
url <- "https://raw.githubusercontent.com/statzenthusiast921/US_Elections_Project/refs/heads/main/Data/compare2024.csv"
df <- read_csv(url, show_col_types = FALSE)
```

```{r preprocess}
#----- Create extra columns
df <- df |>
  mutate(
    dem_diff = dem_votes_actuals - dem_votes_preds,
    dem_perc_diff = dem_diff / dem_votes_preds,
    gop_diff = gop_votes_actuals - gop_votes_preds,
    gop_perc_diff = gop_diff / gop_votes_preds,
  )


overall_results <- df |>
  summarise(
    dem_votes_actuals = sum(dem_votes_actuals),
    gop_votes_actuals = sum(gop_votes_actuals),
    dem_votes_preds = sum(dem_votes_preds),
    gop_votes_preds = sum(gop_votes_preds),
    
  ) 

fill_in_values <- c(
  pull(overall_results[1]),
  pull(overall_results[3]),  
  pull(overall_results[2]), 
  pull(overall_results[4])
)

matrix <- matrix(fill_in_values, nrow = 2, byrow = TRUE)

#----- Convert to a data frame
comparison <- as.data.frame(matrix) |> cbind(c('DEM','GOP'))
colnames(comparison) <- c('Actuals','Predictions','Party')

```

## Overall Performance

```{r performance}
comparison <- comparison |>
  relocate(Party, .before = Actuals) |>
  relocate(Predictions, .before = Actuals) |>
  mutate(
    Diff = round(Actuals - Predictions,0),
    PercDiff = Diff / Predictions,
    Predictions = round(Predictions,0)
    )

margin_row <- data.frame(
  Party = 'Margin',
  Predictions = comparison$Predictions[1] - comparison$Predictions[2],
  Actuals = comparison$Actuals[1] - comparison$Actuals[2],
  Diff = comparison$Diff[1] - comparison$Diff[2],
  PercDiff = NA
  )

comparison_table <- rbind(comparison, margin_row) |>
  mutate(
    PercDiff = case_when(
      is.na(PercDiff) ~ Diff / Predictions,
      TRUE ~ PercDiff
      )
    )
datatable(comparison_table, options = list(dom = 't')) |>
 formatStyle(
    columns = 1:3,  
    background = styleInterval(1, c("white", "white")),
    fontWeight = styleInterval(1, c("normal", "normal")),
    color = styleInterval(1, c("black", "black"))
  ) |>
  formatCurrency(
    columns = 2:4,  
    currency = "",   
    digits = 0
  ) |>
   formatPercentage(
    columns = 5,  
    digits = 2  
  ) 
```

## State Level Performance

```{r state_level_peformance}
#Missing Alaska, DC, Connecticut
state_df <- df |>
  group_by(state_name) |>
  summarise(
    dem_votes_actuals = sum(dem_votes_actuals),
    dem_votes_preds = sum(dem_votes_preds),
    gop_votes_actuals = sum(gop_votes_actuals),
    gop_votes_preds = sum(gop_votes_preds)
  ) |>
  mutate(
    dem_diff = dem_votes_actuals - dem_votes_preds,
    dem_perc_diff = dem_diff / dem_votes_preds,
    gop_diff = gop_votes_actuals - gop_votes_preds,
    gop_perc_diff = gop_diff / gop_votes_preds,
    margin_actual = dem_votes_actuals - gop_votes_actuals,
    margin_pred = dem_votes_preds - gop_votes_preds,
    margin_perc_diff = (margin_actual - margin_pred) / margin_pred
  )
  

```

```{r make_tables_by_party, echo=FALSE, include = FALSE}

state_dem <- state_df |>
  select(state_name, dem_votes_actuals, dem_votes_preds, dem_diff, dem_perc_diff) |>
  mutate(
    abs_perc_diff = abs(dem_perc_diff)
  ) |>
  rename(
    State = state_name,
    Actuals = dem_votes_actuals,
    Predictions = dem_votes_preds,
    Difference = dem_diff,
    `% Diff` = dem_perc_diff,
    `Abs % Diff` = abs_perc_diff
  )

state_gop <- state_df |>
  select(state_name, gop_votes_actuals, gop_votes_preds, gop_diff, gop_perc_diff) |>
  mutate(
    abs_perc_diff = abs(gop_perc_diff)
  ) |>
  rename(
    State = state_name,
    Actuals = gop_votes_actuals,
    Predictions = gop_votes_preds,
    Difference = gop_diff,
    `% Difference` = gop_perc_diff,
    `Abs % Diff` = abs_perc_diff
  )
  
state_margin <- state_df |>
  select(state_name, margin_actual, margin_pred, margin_perc_diff) |>
  mutate(
    abs_perc_diff = abs(margin_perc_diff)
  ) |>
   rename(
    State = state_name,
    `Actual Margin` = margin_actual,
    `Predicted Margin` = margin_pred,
    `% Difference` = margin_perc_diff,
    `Abs % Diff` = abs_perc_diff
  )
  

```

**DEM Prediction Performance**

```{r state_table_dem}

datatable(state_dem , options = list(
  dom = 't',        
  order = list(list(6, "asc")),

  scrollX = TRUE, 
  columnDefs = list(list(targets = "_all", visible = TRUE)),
  pageLength = nrow(state_dem)  # Show all rows (set page length to total rows)
  ))|>

 formatStyle(
    columns = 1:ncol(state_dem),
    background = styleInterval(1, c("white", "white")),
    fontWeight = styleInterval(1, c("normal", "normal")),
    color = styleInterval(1, c("black", "black"))
  ) |>
  formatCurrency(
    columns = 2:4,
    currency = "",
    digits = 0
  ) |>
   formatPercentage(
    columns =c(5,6),
    digits = 2
  ) |>
  formatStyle(
    columns = c("Difference","% Diff"),  
    color = styleInterval(0, c("red", "green"))  
  )


```

**GOP Prediction Performance**

```{r state_table_gop}
datatable(state_gop , options = list(
  dom = 't', 
  order = list(list(6, "asc")),

  scrollX = TRUE, 
  columnDefs = list(list(targets = "_all", visible = TRUE)),
  pageLength = nrow(state_gop)  # Show all rows (set page length to total rows)
  ))|>

 formatStyle(
    columns = 1:ncol(state_gop),
    background = styleInterval(1, c("white", "white")),
    fontWeight = styleInterval(1, c("normal", "normal")),
    color = styleInterval(1, c("black", "black"))
  ) |>
  formatCurrency(
    columns = 2:4,
    currency = "",
    digits = 0
  ) |>
   formatPercentage(
    columns = c(5,6),
    digits = 2
  ) |>
  formatStyle(
    columns = c("Difference", "% Difference"),  
    color = styleInterval(0, c("red", "green"))  
  )

```

**Performance on the Margin**

```{r margin_performance}
datatable(state_margin , options = list(
  dom = 't', 
  order = list(list(5, "asc")),

  scrollX = TRUE, 
  columnDefs = list(list(targets = "_all", visible = TRUE)),
  pageLength = nrow(state_margin)  # Show all rows (set page length to total rows)
  ))|>

 formatStyle(
    columns = 1:ncol(state_margin),
    background = styleInterval(1, c("white", "white")),
    fontWeight = styleInterval(1, c("normal", "normal")),
    color = styleInterval(1, c("black", "black"))
  ) |>
  formatCurrency(
    columns = 2:3,
    currency = "",
    digits = 0
  ) |>
   formatPercentage(
    columns = 4:5,
    digits = 2
  ) |>
  formatStyle(
    columns = c("Actual Margin","Predicted Margin","% Difference"),  
    color = styleInterval(0, c("red", "green"))  
  )

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```
